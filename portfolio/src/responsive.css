/* =========================
   RESPONSIVE DESIGN ADD-ON
   ========================= */

/* --- GLOBAL ADJUSTMENTS --- */
@media (max-width: 1280px) {
   
  .hero-sub-right-fixed {
    position: static;
    text-align: left;
    max-width: 100%;
    margin-top: 60px;
  }

  .hero-sub-right2 {
   position: static;
    text-align: left;
    max-width: 90%;
    margin-top: -10px;
  }

  .hero-image {
    position: relative;
    width: 80%;
    height: auto;
    margin: 40px auto 0;
    display: block;
    transform: none;
  }

  .projects-grid {
    grid-template-columns: 1fr;
    gap: 40px;
  }

  .project-card {
    width: 100%;
    margin: 0 auto;
  }
}

/* --- TABLET VIEW --- */
@media (max-width: 992px) {
  /* HERO section responsive stacking */
  .hero-inner {
    display: flex;
    flex-direction: column;
    align-items: left;
    padding: 0 50px;
  }

  .hero-name {
    text-align: left;
    font-size: 70px;
    line-height: 0.9;
  }

  .hero-sub-right-fixed {
    position: static;
    text-align: center;
    margin-top: 20px;
  }

  .hero-image {
    position: relative;
    width: 70%;
    height: auto;
    margin: 40px auto 0;
  }

  /* Projects stack */
  .projects-grid {
    grid-template-columns: 1fr;
  }

  .project-card:nth-child(1),
  .project-card:nth-child(2) {
    grid-column: 1;
    grid-row: auto;
    margin: 0 auto;
  }

  .project-media img {
    width: 90%;
    height: auto;
  }
}

/* --- MOBILE VIEW (HAMBURGER + STACKED) --- */
@media (max-width: 768px) {
  /* NAVBAR */
  .nav {
    display: none; /* hide regular nav links */
    margin-bottom: -50px;
  }

  .hamburger {
    display: block;
    width: 35px;
    height: 25px;
    position: relative;
    cursor: pointer;
  }



ChatGPT
You said:
Create button that opens links on click, html
ChatGPT said:
Here‚Äôs a simple HTML button that opens a link when clicked üëá

‚úÖ Option 1 ‚Äî Using the onclick attribute
<button onclick="window.open('https://example.com', '_blank')">
  Open Example
</button>
window.open(url, '_blank') opens the link in a new tab.

Use _self instead if you want to open it in the same tab:

<button onclick="window.open('https://example.com', '_self')">
  Open Example (same tab)
</button>
‚úÖ Option 2 ‚Äî Using a styled <a> tag
This is often better for accessibility:

<a href="https://example.com" target="_blank">
  <button>Open Example</button>
</a>
‚úÖ Option 3 ‚Äî Using JavaScript (if you need logic)
<button id="openBtn">Visit Site</button>

<script>
  document.getElementById('openBtn').addEventListener('click', function() {
    window.open('https://example.com', '_blank');
  });
</script>
Would you like me to style the button (e.g., with hover effects or modern CSS)?

You said:
Instead let the link source be from "p{link}", it is calling the link from a const called project that has link : "www.fghj..." inside it
ChatGPT said:
Got it ‚úÖ ‚Äî you want the button to open a link that‚Äôs stored inside a JavaScript object (for example, project.link).

Here‚Äôs how you can do that in plain HTML + JavaScript (ES6) üëá

‚úÖ Example
<!DOCTYPE html>
<html>
  <head>
    <title>Open Project Link</title>
  </head>
  <body>
    <button id="openProjectBtn">Open Project</button>

    <script>
      // Your project object
      const project = {
        name: "My Project",
        link: "https://www.fghj.com" // Your project link
      };

      // Add button click event
      document.getElementById("openProjectBtn").addEventListener("click", () => {
        window.open(project.link, "_blank"); // Opens in new tab
      });
    </script>
  </body>
</html>
üí°If your variable is called p instead:
const p = { link: "https://www.fghj.com" };
Then inside your button logic:

window.open(p.link, "_blank");
Would you like this written in React JSX (e.g., for a project screen or component)?

You said:
Yh in react.jsx
ChatGPT said:
Perfect üëç Here‚Äôs how to do it in React JSX (for example, inside a component):

‚úÖ Example ‚Äî React JSX Component
import React from 'react';

const ProjectButton = () => {
  const project = {
    name: "My Project",
    link: "https://www.fghj.com" // your project link
  };

  const handleOpenLink = () => {
    window.open(project.link, "_blank"); // opens link in new tab
  };

  return (
    <button 
      onClick={handleOpenLink}
      style={{
        padding: '10px 16px',
        backgroundColor: '#007bff',
        color: '#fff',
        border: 'none',
        borderRadius: '6px',
        cursor: 'pointer'
      }}
    >
      Open {project.name}
    </button>
  );
};

export default ProjectButton;
‚öôÔ∏è Usage
You can import and use it in any screen or page:

import ProjectButton from './ProjectButton';

export default function HomeScreen() {
  return (
    <div>
      <h1>My Portfolio</h1>
      <ProjectButton />
    </div>
  );
}
Would you like me to modify it so it takes the project as a prop (so you can reuse it for multiple projects)?

You said:
Put this in a button tag
ChatGPT said:
Got it üëç ‚Äî here‚Äôs the React JSX code where the logic is fully inside a <button> tag (clean and direct):

‚úÖ React JSX (simple version)
import React from 'react';

export default function ProjectButton() {
  const project = {
    name: "My Project",
    link: "https://www.fghj.com"
  };

  return (
    <button
      onClick={() => window.open(project.link, "_blank")}
      style={{
        padding: '10px 16px',
        backgroundColor: '#007bff',
        color: '#fff',
        border: 'none',
        borderRadius: '6px',
        cursor: 'pointer'
      }}
    >
      Open {project.name}
    </button>
  );
}
‚úÖ Explanation:

The onClick is attached directly to the <button> tag.

It calls window.open(project.link, "_blank") to open the project link in a new tab.

You can easily reuse this snippet anywhere.

Would you like me to make it reusable ‚Äî for example, <ProjectButton project={p} /> where p contains the link and name?

You said:
Without react.jsx
ChatGPT said:
Got it üëç ‚Äî here‚Äôs the pure HTML + JavaScript version (no React, just vanilla code) where the <button> tag directly opens the link stored in a JavaScript variable like p.link:

‚úÖ HTML + JavaScript
<!DOCTYPE html>
<html>
  <head>
    <title>Open Link Button</title>
  </head>
  <body>
    <button onclick="window.open(p.link, '_blank')">
      Open Project
    </button>

    <script>
      const p = {
        link: "https://www.fghj.com"
      };
    </script>
  </body>
</html>
‚úÖ How it works:

The <button> has an inline onclick event.

When clicked, it calls window.open(p.link, '_blank').

p.link is defined in your script and holds the actual URL.

Would you like the link to open in the same tab instead of a new one?

You said:
import React from "react";

export default function Contact() {
  return (
    <section id="contact" className="section alt">
      <div className="contact-container">
       

        <div className="contact-box">
          <h2 id="contact-header">Let's Connect</h2>
          <h3 className="contact1">If you would like to work together or have questions, reach out</h3>
          <h3 className="contact2">Drop me an email or chat with me!</h3>
          <p className="contact3">
            Whether you want something fixed or built,<br />
            I'm sure we'll find something we could work together on!
          </p>

          <div className="contact-buttons">
            <button className="contact-btn" onClick={() => window.location.href = "mailto:otunes7175@gmail.com"}>Email Me</button>
            <button className="contact-btn">Let's Chat</button>
          </div>
        </div>
      </div>
    </section>
  );
}
 Let the "Let's Chat'" button bring up a message chat box at the bottom right of the webpage. Maybe we could integrate a chat system that would send a message to me.
    Let it collect Name, E-mail and Message                                                                                                                         
ChatGPT said:
Perfect ‚Äî you want your ‚ÄúLet‚Äôs Chat‚Äù button to open a small chat form at the bottom-right corner of the page where users can send you a message (name, email, message).

Here‚Äôs a clean React JSX version that:
‚úÖ Displays a chat box when the button is clicked
‚úÖ Collects Name, Email, and Message
‚úÖ Can later be connected to email, API, or chat service

üí¨ Contact.jsx (Full Component)
import React, { useState } from "react";
import "./Contact.css"; // optional for styling

export default function Contact() {
  const [isChatOpen, setIsChatOpen] = useState(false);
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    message: "",
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    alert(`Message sent!\n\nName: ${formData.name}\nEmail: ${formData.email}\nMessage: ${formData.message}`);
    setFormData({ name: "", email: "", message: "" });
    setIsChatOpen(false);
  };

  return (
    <section id="contact" className="section alt">
      <div className="contact-container">
        <div className="contact-box">
          <h2 id="contact-header">Let's Connect</h2>
          <h3 className="contact1">
            If you would like to work together or have questions, reach out
          </h3>
          <h3 className="contact2">Drop me an email or chat with me!</h3>
          <p className="contact3">
            Whether you want something fixed or built,<br />
            I'm sure we'll find something we could work together on!
          </p>

          <div className="contact-buttons">
            <button
              className="contact-btn"
              onClick={() => (window.location.href = "mailto:otunes7175@gmail.com")}
            >
              Email Me
            </button>

            <button
              className="contact-btn"
              onClick={() => setIsChatOpen(!isChatOpen)}
            >
              Let's Chat
            </button>
          </div>
        </div>
      </div>

      {/* Chat Box */}
      {isChatOpen && (
        <div className="chat-box">
          <h3>Send a Message üí¨</h3>
          <form onSubmit={handleSubmit}>
            <input
              type="text"
              name="name"
              placeholder="Your Name"
              value={formData.name}
              onChange={handleChange}
              required
            />
            <input
              type="email"
              name="email"
              placeholder="Your Email"
              value={formData.email}
              onChange={handleChange}
              required
            />
            <textarea
              name="message"
              placeholder="Your Message"
              value={formData.message}
              onChange={handleChange}
              required
            ></textarea>
            <button type="submit">Send</button>
          </form>
        </div>
      )}
    </section>
  );
}
üíÖ Contact.css (Quick Styling)
.chat-box {
  position: fixed;
  bottom: 20px;
  right: 20px;
  width: 300px;
  background: #fff;
  box-shadow: 0 4px 10px rgba(0,0,0,0.2);
  border-radius: 10px;
  padding: 15px;
  z-index: 1000;
  animation: fadeIn 0.3s ease;
}

.chat-box h3 {
  margin-bottom: 10px;
  color: #333;
}

.chat-box form {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.chat-box input,
.chat-box textarea {
  width: 100%;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 6px;
  font-size: 14px;
}

.chat-box button {
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 6px;
  padding: 8px;
  cursor: pointer;
  transition: 0.2s;
}

.chat-box button:hover {
  background-color: #0056b3;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}
‚úÖ What happens:
Clicking ‚ÄúLet‚Äôs Chat‚Äù toggles the message box in the bottom-right corner.

User fills in Name, Email, and Message.

On submit, it currently shows an alert ‚Äî later you can replace this with:

An email API (like EmailJS)

A backend endpoint to send you messages directly

Would you like me to integrate this with EmailJS next (so it actually sends messages to your email)?

You said:
The accent colour in rgba css is
ChatGPT said:
In CSS, accent colors don‚Äôt have a single fixed value ‚Äî it depends on the theme or design palette you‚Äôre using.

However, if you‚Äôre referring to the accent-color property or want to define an accent color using RGBA, here‚Äôs how it works üëá

üé® 1. Using the accent-color property (for form controls)
input[type="checkbox"],
input[type="radio"],
progress {
  accent-color: rgba(0, 123, 255, 1); /* blue accent */
}
‚úÖ This sets the accent color for checkboxes, radio buttons, and progress bars.

üé® 2. Defining an accent color variable (commonly used)
You can define your own accent color in RGBA and reuse it:

:root {
  --accent-color: rgba(0, 123, 255, 1); /* bright blue */
}
Then use it anywhere:

button {
  background-color: var(--accent-color);
}
üí° Examples of nice accent RGBA colors
Color Name	RGBA Value	Hex Equivalent
Blue Accent	rgba(0, 123, 255, 1)	#007bff
Purple Accent	rgba(111, 66, 193, 1)	#6f42c1
Green Accent	rgba(40, 167, 69, 1)	#28a745
Pink Accent	rgba(232, 62, 140, 1)	#e83e8c
Teal Accent	rgba(32, 201, 151, 1)	#20c997
Would you like me to pick or suggest an accent color that matches your current contact/chat section style (e.g., blue theme, purple theme, or minimal neutral)?

You said:
The accent used in the css code var(--accent)
ChatGPT said:
Ah ‚Äî got it üëå

You‚Äôre referring to when your CSS uses something like:

color: var(--accent);
That means there‚Äôs a CSS variable named --accent defined somewhere (often at the top level, e.g., in :root or a theme file).

If you don‚Äôt see it defined, you‚Äôll need to create it yourself ‚Äî for example:

‚úÖ Define the accent variable
:root {
  --accent: rgba(0, 123, 255, 1); /* bright blue */
}
Then, anywhere you use:

background-color: var(--accent);
‚Ä¶it will automatically apply that RGBA color.

üé® Common Accent Color Choices
Here are a few popular --accent examples you could use:

Style	Example Definition	Result
Blue (modern default)	--accent: rgba(0, 123, 255, 1);	üîµ
Purple (creative feel)	--accent: rgba(111, 66, 193, 1);	üü£
Green (success vibe)	--accent: rgba(40, 167, 69, 1);	üü¢
Orange (warm tone)	--accent: rgba(255, 133, 27, 1);	üü†
Pink (friendly tone)	--accent: rgba(232, 62, 140, 1);	üíó
So in your case, just add something like this to your global stylesheet:

:root {
  --accent: rgba(0, 123, 255, 1);
}
Would you like me to suggest an accent color that fits your chat/contact section‚Äôs blue theme?

You said:
#6ee7b7  in rgba
ChatGPT said:
Sure üëç
The hex color #6ee7b7 converts to this in RGBA format:

rgba(110, 231, 183, 1)
üí° Examples:
:root {
  --accent: rgba(110, 231, 183, 1); /* same as #6ee7b7 */
}

button {
  background-color: var(--accent);
}
If you want it with transparency (e.g., 60% opacity):

rgba(110, 231, 183, 0.6)
Would you like me to show how it looks as a gradient accent too?

You said:
import React, { useState, useEffect } from "react";

const navItems = [
  { id: "home", label: "Home" },
    { id: "projects", label: "Projects" },
      { id: "about", label: "About" },
        { id: "skills", label: "Skills" },
          { id: "contact", className: "contact-button", label: "Contact Me" },
          ];

          export default function Navbar() {
            const [open, setOpen] = useState(false);
              const [scrolled, setScrolled] = useState(false);

                useEffect(() => {
                    const onScroll = () => setScrolled(window.scrollY > 40);
                        window.addEventListener("scroll", onScroll);
                            return () => window.removeEventListener("scroll", onScroll);
                              }, []);

                                const goTo = (id) => {
                                    setOpen(false);
                                        const el = document.getElementById(id);
                                            if (el) el.scrollIntoView({ behavior: "smooth", block: "start" });
                                              };

                                                return (
                                                    <header className={navbar ${scrolled ? "scrolled" : ""}}>
                                                          <div className="nav-inner">
                                                                  <div className="brand" onClick={() => goTo("home")}>
                                                                            <div className="logo-circle">O</div>
                                                                                    </div>

                                                                                            {/* Hamburger Icon */}
                                                                                                    <div
                                                                                                              className={hamburger ${open ? "active" : ""}}
                                                                                                                        onClick={() => setOpen(!open)}
                                                                                                                                >
                                                                                                                                          <span></span>
                                                                                                                                                    <span></span>
                                                                                                                                                              <span></span>
                                                                                                                                                                      </div>

                                                                                                                                                                              {/* Navigation Menu */}
                                                                                                                                                                                      <nav className={nav ${open ? "open" : ""}}>
                                                                                                                                                                                                {navItems.map((n) => (
                                                                                                                                                                                                            <button
                                                                                                                                                                                                                          key={n.id}
                                                                                                                                                                                                                                        className={n.className ? n.className : "nav-link"}
                                                                                                                                                                                                                                                      onClick={() => goTo(n.id)}
                                                                                                                                                                                                                                                                  >
                                                                                                                                                                                                                                                                                {n.label}
                                                                                                                                                                                                                                                                                            </button>
                                                                                                                                                                                                                                                                                                      ))}
                                                                                                                                                                                                                                                                                                              </nav>
                                                                                                                                                                                                                                                                                                                    </div>
                                                                                                                                                                                                                                                                                                                        </header>
                                                                                                                                                                                                                                                                                                                          );
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                Let the hamburger contain the nav options too.                                                                       
ChatGPT said:
Excellent ‚Äî you‚Äôre very close! üî•

Your code already includes both the hamburger icon and the navigation menu (<nav>), but right now, the hamburger only toggles open ‚Äî it doesn‚Äôt actually contain or overlay the navigation options visually.

Let‚Äôs adjust the structure and styling logic so that when you click the hamburger:
‚úÖ It slides open or toggles a menu (with all nav items inside it)
‚úÖ Works responsively ‚Äî showing the full menu on desktop, collapsible on mobile

‚úÖ Updated Navbar.jsx
This version keeps your logic but improves layout and structure so the hamburger contains and reveals the nav items.

import React, { useState, useEffect } from "react";

const navItems = [
  { id: "home", label: "Home" },
  { id: "projects", label: "Projects" },
  { id: "about", label: "About" },
  { id: "skills", label: "Skills" },
  { id: "contact", className: "contact-button", label: "Contact Me" },
];

export default function Navbar() {
  const [open, setOpen] = useState(false);
  const [scrolled, setScrolled] = useState(false);

  useEffect(() => {
    const onScroll = () => setScrolled(window.scrollY > 40);
    window.addEventListener("scroll", onScroll);
    return () => window.removeEventListener("scroll", onScroll);
  }, []);

  const goTo = (id) => {
    setOpen(false);
    const el = document.getElementById(id);
    if (el) el.scrollIntoView({ behavior: "smooth", block: "start" });
  };

  return (
    <header className={`navbar ${scrolled ? "scrolled" : ""}`}>
      <div className="nav-inner">
        {/* Logo */}
        <div className="brand" onClick={() => goTo("home")}>
          <div className="logo-circle">O</div>
        </div>

        {/* Hamburger Menu Icon */}
        <div
          className={`hamburger ${open ? "active" : ""}`}
          onClick={() => setOpen(!open)}
        >
          <span></span>
          <span></span>
          <span></span>
        </div>

        {/* Navigation Menu (visible in both hamburger + desktop) */}
        <nav className={`nav-menu ${open ? "open" : ""}`}>
          {navItems.map((n) => (
            <button
              key={n.id}
              className={n.className ? n.className : "nav-link"}
              onClick={() => goTo(n.id)}
            >
              {n.label}
            </button>
          ))}
        </nav>
      </div>
    </header>
  );
}
üíÖ CSS (Navbar.css or global)
Here‚Äôs an example of CSS to make it responsive and ensure the hamburger contains the menu options when open.

.navbar {
  position: fixed;
  top: 0;
  width: 100%;
  background: white;
  display: flex;
  justify-content: center;
  box-shadow: 0 2px 10px rgba(0,0,0,0.05);
  transition: background 0.3s;
  z-index: 1000;
}

.navbar.scrolled {
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(5px);
}

.nav-inner {
  width: 90%;
  max-width: 1100px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 12px 0;
}

.logo-circle {
  background: var(--accent, rgba(110, 231, 183, 1));
  color: white;
  font-weight: bold;
  font-size: 1.2rem;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
}

/* Hamburger icon */
.hamburger {
  display: none;
  flex-direction: column;
  cursor: pointer;
  gap: 4px;
}
.hamburger span {
  width: 25px;
  height: 3px;
  background: #333;
  border-radius: 2px;
  transition: 0.3s;
}
.hamburger.active span:nth-child(1) {
  transform: translateY(8px) rotate(45deg);
}
.hamburger.active span:nth-child(2) {
  opacity: 0;
}
.hamburger.active span:nth-child(3) {
  transform: translateY(-8px) rotate(-45deg);
}

/* Desktop nav */
.nav-menu {
  display: flex;
  gap: 1.2rem;
}
.nav-link,
.contact-button {
  background: none;
  border: none;
  cursor: pointer;
  font-weight: 500;
  color: #333;
  transition: 0.2s;
}
.nav-link:hover,
.contact-button:hover {
  color: var(--accent, rgba(110, 231, 183, 1));
}

/* Contact button styled */
.contact-button {
  background: var(--accent, rgba(110, 231, 183, 1));
  color: #fff;
  padding: 8px 14px;
  border-radius: 6px;
}
.contact-button:hover {
  opacity: 0.9;
}

/* Mobile view */
@media (max-width: 768px) {
  .hamburger {
    display: flex;
  }

  .nav-menu {
    position: absolute;
    top: 60px;
    right: 20px;
    background: #fff;
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    opacity: 0;
    transform: translateY(-20px);
    pointer-events: none;
    transition: 0.3s ease;
  }

  .nav-menu.open {
    opacity: 1;
    transform: translateY(0);
    pointer-events: all;
  }
}
üß† Summary:
‚úÖ The hamburger now toggles the visibility of the nav menu, which slides open below or beside it.
‚úÖ On desktop, the full nav is shown normally.
‚úÖ The goTo() function still scrolls smoothly to sections.
‚úÖ The accent color var(--accent) uses your green tint rgba(110, 231, 183, 1).

Would you like the hamburger menu to appear as a slide-in drawer from the right (like a mobile overlay)?

You said:
Code to make the hamburger drop down and contain the nav options, specifically 

Cancel

Send
ChatGPT said:
Perfect üëå ‚Äî you want the hamburger menu to drop down (not slide sideways) and contain all the navigation options directly below it when opened.

Here‚Äôs a clean React + CSS setup that does exactly that:
When the hamburger is clicked, the nav options drop down below it with a smooth transition.

‚úÖ React Code (Navbar.jsx)
import React, { useState, useEffect } from "react";
import "./Navbar.css";

const navItems = [
  { id: "home", label: "Home" },
  { id: "projects", label: "Projects" },
  { id: "about", label: "About" },
  { id: "skills", label: "Skills" },
  { id: "contact", className: "contact-button", label: "Contact Me" },

            

/* Hamburger icon */
.hamburger {
  width: 25px;
  height: 20px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  cursor: pointer;
}

.hamburger span {
  display: block;
  height: 3px;
  background: #333;
  border-radius: 2px;
  transition: 0.3s;
}

.hamburger.active span:nth-child(1) {
  transform: translateY(8px) rotate(45deg);
}
.hamburger.active span:nth-child(2) {
  opacity: 0;
}
.hamburger.active span:nth-child(3) {
  transform: translateY(-8px) rotate(-45deg);
}
  

  .hamburger::before,
  .hamburger::after,
  .hamburger div {
    content: "";
    position: absolute;
    left: 0;
    width: 100%;
    height: 4px;
    background: var(--accent);
    transition: all 0.3s ease;
  }

  .hamburger::before {
    top: 0;
  }

  .hamburger div {
    top: 10px;
  }

  .hamburger::after {
    bottom: 0;
  }

  /* Dropdown menu when active */
  .nav-dropdown {
    display: flex;
    flex-direction: column;
    position: absolute;
    top: 60px;
    right: 15px;
    background: rgba(10, 20, 40, 0.9);
    border-radius: 10px;
    padding: 20px;
    gap: 15px;
    z-index: 999;
  }

  /* HERO layout for mobile */
  .hero-inner {
    display: flex;
    flex-direction: column;
    align-items: left;
    padding: 0 45px;
    padding-top: -30px;
    margin-top: -80px;
    margin-left:-60px;
    padding-left:-60px;
  }

  .hero-name {
    text-align: left;
    font-size: 60px;
    line-height: 1;
    padding-top: -70px;
    padding-left: -40px;
  }

  .hero-sub-right-fixed {
    position: static;
    text-align: left;
    margin-top: 10px;
    font-size: 22px;
  }

  .hero-sub-right2 {
    position: static;
    text-align: left;
    margin-top: 70px;
    margin-right:40px;
  }

  .hero-image {
    width: 85%;
    height: 90%;
    margin-top: 35px;
  }

  /* PROJECTS */
  .projects-grid {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .project-card {
    width: 90%;
    margin: 20px 0;
  }

  .project-media img {
    width: 100%;
    height: auto;
  }

  /* CONTACT */
  .contact-box {
    width: 95%;
    padding: 30px 15px;
  }

  /* GENERAL STACKING */
  .about-grid,
  .skills-grid {
    grid-template-columns: 1fr;
    text-align: center;
  }
}

/* --- SMALL DEVICES (PHONES <480px) --- */
@media (max-width: 480px) {
  .hero-name {
    font-size: 38px;
  }

  .hero-sub-right-fixed {
    font-size: 18px;
  }

  .hero-image {
    width: 90%;
  }

  .project-media img {
    height: 200px;
  }
}
